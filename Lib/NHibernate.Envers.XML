<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NHibernate.Envers</name>
    </assembly>
    <members>
        <member name="P:NHibernate.Envers.AuditedAttribute.TargetAuditMode">
            <summary>
            @return Specifies if the entity that is the target of the relation should be audited or not. If not, then when
            reading a historic version an audited entity, the realtion will always point to the "current" entity.
            This is useful for dictionary-like entities, which don't change and don't need to be audited.
            </summary>
        </member>
        <member name="P:NHibernate.Envers.AuditJoinTableAttribute.Name">
            <summary>
            Name of the join table. Defaults to a concatenation of the names of the primary table of the entity
            owning the association and of the primary table of the entity referenced by the association.
            </summary>
        </member>
        <member name="P:NHibernate.Envers.AuditJoinTableAttribute.Schema">
            <summary>
            The schema of the join table. Defaults to the schema of the entity owning the association.
            </summary>
        </member>
        <member name="P:NHibernate.Envers.AuditJoinTableAttribute.Catalog">
            <summary>
            The catalog of the join table. Defaults to the catalog of the entity owning the association.
            </summary>
        </member>
        <member name="P:NHibernate.Envers.AuditJoinTableAttribute.InverseJoinColumns">
            <summary>
             The foreign key columns of the join table which reference the primary table of the entity that does not
             own the association (i.e. the inverse side of the association).
            </summary>
        </member>
        <member name="T:NHibernate.Envers.AuditMappedByAttribute">
             <p>
             Annotation to specify a "fake" bi-directional relation. Such a relation uses {@code @OneToMany} +
             {@code @JoinColumn} on the one side, and {@code @ManyToOne} + {@code @Column(insertable=false, updatable=false)} on
             the many side. Then, Envers won't use a join table to audit this relation, but will store changes as in a normal
             bi-directional relation.
             </p>
            
             <p>
             This annotation is <b>experimental</b> and may change in future releases.
             </p>
            
             @author Simon Duduica, port of Envers Tools class by Adam Warski (adam at warski dot org)
        </member>
        <member name="P:NHibernate.Envers.AuditMappedByAttribute.MappedBy">
            @return Name of the property in the related entity which maps back to this entity. The property should be
            mapped with {@code @ManyToOne} and {@code @Column(insertable=false, updatable=false)}.
        </member>
        <member name="P:NHibernate.Envers.AuditMappedByAttribute.PositionMappedBy">
            @return Name of the property in the related entity which maps to the position column. Should be specified only
            for indexed collection, when @{@link org.hibernate.annotations.IndexColumn} is used on the collection.
            The property should be mapped with {@code @Column(insertable=false, updatable=false)}.
        </member>
        <member name="P:NHibernate.Envers.AuditOverrideAttribute.Name">
            @return <strong>Required</strong> Name of the field (or property) whose mapping
            is being overridden.
        </member>
        <member name="P:NHibernate.Envers.AuditOverrideAttribute.IsAudited">
            @return Indicates if the field (or property) is audited; defaults to {@code true}.
        </member>
        <member name="P:NHibernate.Envers.AuditOverrideAttribute.AuditJoinTable">
            @return New {@link AuditJoinTable} used for this field (or property). Its value
            is ignored if {@link #isAudited()} equals to {@code false}.
        </member>
        <member name="F:NHibernate.Envers.AuditOverridesAttribute.value">
            @return An array of {@link AuditOverride} values, to define the new auditing
            behavior.
        </member>
        <member name="M:NHibernate.Envers.AuditReaderFactory.Get(NHibernate.ISession)">
            <summary>
            Create an audit reader associated with an open session.
            </summary>
            <param name="session">An open session.</param>
            <returns>An audit reader associated with the given sesison. It shouldn't be used after the session is closed.</returns>
            <exception cref="T:NHibernate.Envers.Exceptions.AuditException">When the given required listeners aren't installed.</exception>
        </member>
        <member name="M:NHibernate.Envers.AuditReaderFactory.Auditer(NHibernate.ISession)">
            <summary>
            Create an audit reader associated with an open session.
            </summary>
            <param name="session">An open session.</param>
            <returns>An audit reader associated with the given sesison. It shouldn't be used after the session is closed.</returns>
            <exception cref="T:NHibernate.Envers.Exceptions.AuditException">When the given required listeners aren't installed.</exception>
        </member>
        <member name="T:NHibernate.Envers.Configuration.Fluent.LooselyTypedFluentAudit">
            <summary>
            An <see cref="T:NHibernate.Envers.Configuration.Fluent.IAttributeProvider"/> to audit the full class.
            </summary>
            <remarks>
            The class will be audited using default values of <see cref="T:NHibernate.Envers.AuditedAttribute"/> without exclusions of properties.
            </remarks>
            <seealso cref="T:NHibernate.Envers.Configuration.Fluent.IFluentAudit`1"/>
            <seealso cref="T:NHibernate.Envers.Configuration.Fluent.FluentAudit`1"/>
        </member>
        <member name="T:NHibernate.Envers.Configuration.Store.IEntityMeta">
            <summary>
            Holds configuration information for an entity type
            </summary>
        </member>
        <member name="P:NHibernate.Envers.Configuration.Store.IEntityMeta.ClassMetas">
            <summary>
            Metas for current class
            </summary>
        </member>
        <member name="P:NHibernate.Envers.Configuration.Store.IEntityMeta.MemberMetas">
            <summary>
            Member metas for current class
            </summary>
        </member>
        <member name="T:NHibernate.Envers.Configuration.Store.IMetaDataProvider">
            <summary>
            Knows how to create configuration data
            </summary>
        </member>
        <member name="M:NHibernate.Envers.Configuration.Store.IMetaDataProvider.CreateMetaData(NHibernate.Cfg.Configuration)">
            <summary>
            Creates the meta data
            </summary>
            <param name="nhConfiguration">The NH Configuration. Note - remove this?</param>
            <returns>
            A dictionary of <see cref="T:NHibernate.Envers.Configuration.Store.IEntityMeta"/>, keyed by entity type
            </returns>
        </member>
        <member name="M:NHibernate.Envers.Configuration.AuditEntitiesConfiguration.GetRevisionPropPath(System.String)">
            @param propertyName Property of the revision entity.
            @return A path to the given property of the revision entity associated with an audit entity.
        </member>
        <member name="P:NHibernate.Envers.Configuration.AuditEntitiesConfiguration.RevisionInfoEntityFullClassName">
            <summary>
            Returns the class name without the assembly name. Used for generating querries
            </summary>
        </member>
        <member name="T:NHibernate.Envers.Configuration.ClassesAuditingData">
            <summary>
            A helper class holding auditing meta-data for all persistent classes.
            </summary>
        </member>
        <member name="M:NHibernate.Envers.Configuration.ClassesAuditingData.AddClassAuditingData(NHibernate.Mapping.PersistentClass,NHibernate.Envers.Configuration.Metadata.Reader.ClassAuditingData)">
            <summary>
            Stores information about auditing meta-data for the given class.
            </summary>
            <param name="pc">Persistent class.</param>
            <param name="cad">Auditing meta-data for the given class.</param>
        </member>
        <member name="M:NHibernate.Envers.Configuration.ClassesAuditingData.UpdateCalculatedFields">
            <summary>
            After all meta-data is read, updates calculated fields. This includes:
            <ul>
            <li>setting {@code forceInsertable} to {@code true} for properties specified by {@code @AuditMappedBy}</li> 
            </ul>
            </summary>
        </member>
        <member name="P:NHibernate.Envers.Configuration.ClassesAuditingData.AllClassAuditedData">
            <summary>
            A collection of all auditing meta-data for persistent classes.
            </summary>
        </member>
        <member name="T:NHibernate.Envers.Configuration.Fluent.FluentAudit`1">
            <summary>
            An <see cref="T:NHibernate.Envers.Configuration.Fluent.IAttributeProvider"/> to audit the full class.
            </summary>
            <seealso cref="T:NHibernate.Envers.Configuration.Fluent.IFluentAudit`1"/>
            <seealso cref="T:NHibernate.Envers.Configuration.Fluent.LooselyTypedFluentAudit"/>
        </member>
        <member name="M:NHibernate.Envers.Configuration.Fluent.IFluentAudit`1.Exclude(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Excludes the property from being audited.
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Envers.Configuration.Fluent.IFluentAudit`1.Exclude(System.String)">
            <summary>
            Excludes the property from being audited.
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Envers.Configuration.Fluent.IFluentAudit`1.ExcludeRelation(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Excludes the property from tracking changes on related entity.
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Envers.Configuration.Fluent.IFluentAudit`1.ExcludeRelation(System.String)">
            <summary>
            Excludes the property from tracking changes on related entity.
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="T:NHibernate.Envers.Configuration.Fluent.FluentConfiguration">
            <summary>
            This implementation of <see cref="T:NHibernate.Envers.Configuration.Store.IMetaDataProvider"/>
            is used to programmaticly configure envers.
            </summary>
        </member>
        <member name="M:NHibernate.Envers.Configuration.Fluent.FluentConfiguration.Audit(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Register multiple audited entities.
            </summary>
            <param name="types">All types to be audited.</param>
            <remarks>
            Each class will be audited using default values of <see cref="T:NHibernate.Envers.AuditedAttribute"/> without exclusions of properties.
            </remarks>
        </member>
        <member name="M:NHibernate.Envers.Configuration.Fluent.FluentConfiguration.SetRevisionEntity``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Defines a custom revision entity.
            </summary>
            <typeparam name="T">The custom revision entity type</typeparam>
            <param name="revisionNumber">Revision number property on custom revision entity</param>
            <param name="revisionTimestamp">Revision timestamp property on custom revision entity</param>
        </member>
        <member name="P:NHibernate.Envers.Configuration.GlobalConfiguration.GenerateRevisionsForCollections">
            <summary>
            Should a revision be generated when a not-owned relation field changes
            </summary>
        </member>
        <member name="P:NHibernate.Envers.Configuration.GlobalConfiguration.DoNotAuditOptimisticLockingField">
            <summary>
            Should the optimistic locking property of an entity be considered unversioned
            </summary>
        </member>
        <member name="P:NHibernate.Envers.Configuration.GlobalConfiguration.CorrelatedSubqueryOperator">
            <summary>
            Which operator to use in correlated subqueries (when we want a property to be equal to the result of
            a correlated subquery).
            </summary>
            <remarks>
            By default the value is "=". However, HSQLDB has an issue related to that, so as a workaround,
            "in" is used.
            </remarks>
        </member>
        <member name="P:NHibernate.Envers.Configuration.GlobalConfiguration.StoreDataAtDelete">
            <summary>
            Should entity data be stored when it is deleted
            </summary>
        </member>
        <member name="P:NHibernate.Envers.Configuration.GlobalConfiguration.DefaultSchemaName">
            <summary>
            The default name of the schema of audit tables.
            </summary>
        </member>
        <member name="P:NHibernate.Envers.Configuration.GlobalConfiguration.DefaultCatalogName">
            <summary>
            The default name of the catalog of the audit tables.
            </summary>
        </member>
        <member name="T:NHibernate.Envers.Configuration.Metadata.AuditEntityNameRegister">
            <summary>
            A register of all audit entity names used so far.
            </summary>
        </member>
        <member name="M:NHibernate.Envers.Configuration.Metadata.AuditEntityNameRegister.check(System.String)">
            <summary>
            </summary>
            <param name="auditEntityName">Name of the audit entity.</param>
            <returns>True if the given audit entity name is already used.</returns>
        </member>
        <member name="M:NHibernate.Envers.Configuration.Metadata.AuditEntityNameRegister.Register(System.String)">
            <summary>
            Register an audit entity name. If the name is already registered, an exception is thrown.
            </summary>
            <param name="auditEntityName">
            Name of the audit entity.
            </param>
        </member>
        <member name="M:NHibernate.Envers.Configuration.Metadata.AuditEntityNameRegister.CreateUnique(System.String)">
            <summary>
            Creates a unique (not yet registered) audit entity name by appending consecutive numbers to the base
            name. If the base name is not yet used, it is returned unmodified.
            </summary>
            <param name="baseAuditEntityName">The base entity name.</param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Envers.Configuration.Metadata.AuditMetadataGenerator.CloneAndSetupRevisionInfoRelationMapping(System.Xml.XmlDocument)">
            Clones the revision info relation mapping, so that it can be added to other mappings. Also, the name of
            the property and the column are set properly.
            @return A revision info mapping, which can be added to other mappings (has no parent).
        </member>
        <member name="M:NHibernate.Envers.Configuration.Metadata.AuditMetadataGenerator.GetReferencedIdMappingData(System.String,System.String,NHibernate.Envers.Configuration.Metadata.Reader.PropertyAuditingData,System.Boolean)">
            Reads the id mapping data of a referenced entity.
            @param entityName Name of the entity which is the source of the relation.
            @param referencedEntityName Name of the entity which is the target of the relation.
            @param propertyAuditingData Auditing data of the property that is the source of the relation.
            @param allowNotAuditedTarget Are not-audited target entities allowed.
            @throws MappingException If a relation from an audited to a non-audited entity is detected, which is not
            mapped using {@link RelationTargetAuditMode#NOT_AUDITED}.
            @return The id mapping data of the related entity. 
        </member>
        <member name="F:NHibernate.Envers.Configuration.Metadata.CollectionMetadataGenerator.referencedEntityName">
            Null if this collection isn't a relation to another entity.
        </member>
        <member name="M:NHibernate.Envers.Configuration.Metadata.CollectionMetadataGenerator.#ctor(NHibernate.Envers.Configuration.Metadata.AuditMetadataGenerator,NHibernate.Mapping.Collection,NHibernate.Envers.Entities.Mapper.ICompositeMapperBuilder,System.String,NHibernate.Envers.Configuration.Metadata.EntityXmlMappingData,NHibernate.Envers.Configuration.Metadata.Reader.PropertyAuditingData)">
            @param mainGenerator Main generator, giving access to configuration and the basic mapper.
            @param propertyValue Value of the collection, as mapped by Hibernate.
            @param currentMapper Mapper, to which the appropriate {@link org.hibernate.envers.entities.mapper.PropertyMapper}
            will be added.
            @param referencingEntityName Name of the entity that owns this collection.
            @param xmlMappingData In case this collection requires a middle table, additional mapping documents will
            be created using this object.
            @param propertyAuditingData Property auditing (meta-)data. Among other things, holds the name of the
            property that references the collection in the referencing entity, the user data for middle (join)
            table and the value of the <code>@MapKey</code> annotation, if there was one.
        </member>
        <member name="M:NHibernate.Envers.Configuration.Metadata.CollectionMetadataGenerator.AddRelatedToXmlMapping(System.Xml.XmlElement,System.String,System.Collections.Generic.IEnumerator{System.String},NHibernate.Envers.Entities.IdMappingData)">
            Adds mapping of the id of a related entity to the given xml mapping, prefixing the id with the given prefix.
            @param xmlMapping Mapping, to which to add the xml.
            @param prefix Prefix for the names of properties which will be prepended to properties that form the id.
            @param columnNameIterator Iterator over the column names that will be used for properties that form the id.
            @param relatedIdMapping Id mapping data of the related entity.
        </member>
        <member name="M:NHibernate.Envers.Configuration.Metadata.CollectionMetadataGenerator.AddValueToMiddleTable(NHibernate.Mapping.IValue,System.Xml.XmlElement,NHibernate.Envers.Configuration.Metadata.Reader.QueryGeneratorBuilder,System.String,System.String[])">
            
             @param value Value, which should be mapped to the middle-table, either as a relation to another entity,
             or as a simple value.
             @param xmlMapping If not <code>null</code>, xml mapping for this value is added to this element.
             @param queryGeneratorBuilder In case <code>value</code> is a relation to another entity, information about it
             should be added to the given.
             @param prefix Prefix for proeprty names of related entities identifiers.
             @param joinColumns Names of columns to use in the xml mapping, if this array isn't null and has any elements.
             @return Data for mapping this component.
        </member>
        <member name="T:NHibernate.Envers.Configuration.Metadata.ComponentMetadataGenerator">
            <summary>
            Generates metadata for components.
            </summary>
        </member>
        <member name="T:NHibernate.Envers.Configuration.Metadata.EntityXmlMappingData">
            @author Simon Duduica, port of Envers omonyme class by Adam Warski (adam at warski dot org)
        </member>
        <member name="P:NHibernate.Envers.Configuration.Metadata.EntityXmlMappingData.ClassMapping">
            The xml element that maps the class. The root can be one of the folowing elements:
            class, subclass, union-subclass, joined-subclass
        </member>
        <member name="M:NHibernate.Envers.Configuration.Metadata.InheritanceTypeExtensions.GetInheritanceType(NHibernate.Mapping.PersistentClass)">
            <summary>
            Get the <see cref="T:NHibernate.Envers.Configuration.Metadata.InheritanceType"/> for a given <see cref="T:NHibernate.Mapping.PersistentClass"/>.
            </summary>
            <param name="source">The class for which to get the inheritance type.</param>
            <returns>
            The inheritance type of this class. NONE, if this class does not inherit from another persisten class.
            </returns>
        </member>
        <member name="M:NHibernate.Envers.Configuration.Metadata.MetadataTools.AddColumns(System.Xml.XmlElement,System.Collections.Generic.IEnumerable{NHibernate.Mapping.Column})">
            <summary>
            Adds the columns in the enumerator to the any_mapping XmlElement
            </summary>
            <param name="any_mapping"></param>
            <param name="columns">should contain elements of Column type</param>
        </member>
        <member name="T:NHibernate.Envers.Configuration.Metadata.Reader.AnnotationsMetadataReader">
            <summary>
            A helper class to read versioning meta-data from annotations on a persistent class.
            </summary>
        </member>
        <member name="F:NHibernate.Envers.Configuration.Metadata.Reader.AnnotationsMetadataReader._auditData">
            <summary>
            This object is filled with information read from annotations and returned by the <code>getVersioningData</code>
            method.</summary>
        </member>
        <member name="T:NHibernate.Envers.Configuration.Metadata.Reader.AuditedPropertiesReader">
            Reads persistent properties form a
            {@link org.hibernate.envers.configuration.metadata.reader.PersistentPropertiesSource}
            and adds the ones that are audited to a
            {@link org.hibernate.envers.configuration.metadata.reader.AuditedPropertiesHolder},
            filling all the auditing data.
            @author Simon Duduica, port of Envers Tools class by Adam Warski (adam at warski dot org)
            @author Erik-Berndt Scheper
        </member>
        <member name="M:NHibernate.Envers.Configuration.Metadata.Reader.AuditedPropertiesReader.FillPropertyData(System.Reflection.MemberInfo,System.String,NHibernate.Envers.Configuration.Metadata.Reader.PropertyAuditingData,System.String)">
            Checks if a property is audited and if yes, fills all of its data.
            @param property Property to check.
            @param propertyData Property data, on which to set this property's modification store.
            @param accessType Access type for the property.
            @return False if this property is not audited.
        </member>
        <member name="M:NHibernate.Envers.Configuration.Metadata.Reader.AuditedPropertiesReader.ProcessPropertyAuditingOverrides(System.Reflection.MemberInfo,NHibernate.Envers.Configuration.Metadata.Reader.PropertyAuditingData)">
             Process the {@link org.hibernate.envers.AuditOverride} annotations for this property.
            
             @param property
                        the property for which the {@link org.hibernate.envers.AuditOverride}
                        annotations are being processed
             @param propertyData
                        the Envers auditing data for this property
             @return {@code false} if isAudited() of the override annotation was set to
        </member>
        <member name="T:NHibernate.Envers.Configuration.Metadata.Reader.IAuditedPropertiesHolder">
            <summary>
            Implementations hold other audited properties.
            </summary>
        </member>
        <member name="M:NHibernate.Envers.Configuration.Metadata.Reader.IAuditedPropertiesHolder.AddPropertyAuditingData(System.String,NHibernate.Envers.Configuration.Metadata.Reader.PropertyAuditingData)">
            <summary>
            Add an audited property.
            </summary>
            <param name="propertyName">Name of the audited property.</param>
            <param name="auditingData">Data for the audited property.</param>
        </member>
        <member name="M:NHibernate.Envers.Configuration.Metadata.Reader.IAuditedPropertiesHolder.GetPropertyAuditingData(System.String)">
            <summary>
            
            </summary>
            <param name="propertyName">Name of a property.</param>
            <returns>Auditing data for the property.</returns>
        </member>
        <member name="F:NHibernate.Envers.Configuration.Metadata.Reader.ClassAuditingData.defaultAudited">
            <summary>
             True if the class is audited globally (this helps to cover the cases when there are no fields in the class,
             but it's still audited).
            </summary>
        </member>
        <member name="T:NHibernate.Envers.Configuration.Metadata.Reader.QueryGeneratorBuilder">
            <summary>
            Builds query generators, for reading collection middle tables, along with any related entities.
            The related entities information can be added gradually, and when complete, the query generator can be built.
            </summary>
        </member>
        <member name="P:NHibernate.Envers.Configuration.Metadata.Reader.QueryGeneratorBuilder.CurrentIndex">
            <summary>
            Current index of data in the array, which will be the element of a list, returned when executing a query
            generated by the built query generator.
            </summary>
        </member>
        <member name="T:NHibernate.Envers.Configuration.Metadata.ToOneRelationMetadataGenerator">
            <summary>
            Generates metadata for to-one relations (reference-valued properties).
            </summary>
        </member>
        <member name="M:NHibernate.Cfg.NhConfigurationExtension.IntegrateWithEnvers(NHibernate.Cfg.Configuration,NHibernate.Envers.Event.AuditEventListener,NHibernate.Envers.Configuration.Store.IMetaDataProvider)">
            <summary>
            Integrate Envers with NHibernate.
            </summary>
            <param name="configuration">The NHibernate configuration.</param>
            <param name="auditEventListener">The custom implementation for all listeners (better if inherited from <see cref="T:NHibernate.Envers.Event.AuditEventListener"/>&gt;)</param>
            <param name="metaDataProvider">The provider of metadata (attributes, embedded fluent-configuration or custom <see cref="T:NHibernate.Envers.Configuration.Store.IMetaDataProvider"/> for custom DSL.</param>
            <returns>The NHibernate configuration.</returns>
            <remarks>
            WARNING: Be sure to call this method after set all configuration properties, after have added all your mappings 
            and after integrate NHibernate with all others packages as NHibernate.Validator, NHibernate.Search, NHibernate.Spatial.
            </remarks>
        </member>
        <member name="M:NHibernate.Cfg.NhConfigurationExtension.IntegrateWithEnvers(NHibernate.Cfg.Configuration,NHibernate.Envers.Configuration.Store.IMetaDataProvider)">
            <summary>
            Integrate Envers with NHibernate.
            </summary>
            <param name="configuration">The NHibernate configuration.</param>
            <param name="metaDataProvider">The provider of metadata (attributes, embedded fluent-configuration or custom <see cref="T:NHibernate.Envers.Configuration.Store.IMetaDataProvider"/> for custom DSL.</param>
            <returns>The NHibernate configuration.</returns>
            <remarks>
            The default <see cref="T:NHibernate.Envers.Event.AuditEventListener"/> will be used.
            WARNING: Be sure to call this method after set all configuration properties, after have added all your mappings 
            and after integrate NHibernate with all others packages as NHibernate.Validator, NHibernate.Search, NHibernate.Spatial.
            </remarks>
            <seealso cref="T:NHibernate.Envers.Configuration.Attributes.AttributeConfiguration"/>
            <seealso cref="T:NHibernate.Envers.Configuration.Fluent.FluentConfiguration"/>
        </member>
        <member name="M:NHibernate.Cfg.NhConfigurationExtension.IntegrateWithEnvers(NHibernate.Cfg.Configuration)">
            <summary>
            Integrate Envers with NHibernate.
            </summary>
            <param name="configuration">The NHibernate configuration.</param>
            <returns>The NHibernate configuration.</returns>
            <remarks>
            The default <see cref="T:NHibernate.Envers.Event.AuditEventListener"/> and the <see cref="T:NHibernate.Envers.Configuration.Attributes.AttributeConfiguration"/> will be used.
            WARNING: Be sure to call this method after set all configuration properties, after have added all your mappings 
            and after integrate NHibernate with all others packages as NHibernate.Validator, NHibernate.Search, NHibernate.Spatial.
            </remarks>
        </member>
        <member name="T:NHibernate.Envers.Configuration.PersistentClassGraphDefiner">
            <summary>
            Defines a graph, where the vertexes are all persistent classes, and there is an edge from
            p.c. A to p.c. B iff A is a superclass of B.
            </summary>
        </member>
        <member name="T:NHibernate.Envers.Tools.Graph.IGraphDefiner`2">
            Defines a graph, where each vertex has a representation, which identifies uniquely a value.
            Representations are comparable, values - not.
            @author Simon Duduica, port of Envers omonyme class by Adam Warski (adam at warski dot org)
        </member>
        <member name="T:NHibernate.Envers.Configuration.Store.IMetaDataStore">
            <summary>
            Holds configuration data for all entities
            </summary>
        </member>
        <member name="M:NHibernate.Envers.Configuration.Store.IMetaDataStore.ClassMeta``1(System.Type)">
            <summary>
            Gets attribute for certain type.
            </summary>
            <typeparam name="T">Attribute type</typeparam>
            <param name="entityType">Type to search</param>
            <returns>
            Only one attribute will be returned, 
            if multiple exists you'll need to use <see cref="P:NHibernate.Envers.Configuration.Store.IMetaDataStore.EntityMetas"/>
            If attribute does not exists, null is returned.
            </returns>
        </member>
        <member name="M:NHibernate.Envers.Configuration.Store.IMetaDataStore.MemberMeta``1(System.Reflection.MemberInfo)">
            <summary>
            Gets attribute for certain member.
            <typeparam name="T">Attribute type</typeparam>
            </summary>
            <param name="member">The member to search</param>
            <returns>
            Only one attribute will be returned, 
            if multiple exists you'll need to use <see cref="P:NHibernate.Envers.Configuration.Store.IMetaDataStore.EntityMetas"/>
            If attribute does not exists, null is returned.
            </returns>
        </member>
        <member name="M:NHibernate.Envers.Configuration.Store.IMetaDataStore.EntitiesDeclaredWith``1">
            <summary>
            Gets all types decorated with attribute T
            </summary>
            <typeparam name="T">Attribute type</typeparam>
            <returns>The types</returns>
        </member>
        <member name="P:NHibernate.Envers.Configuration.Store.IMetaDataStore.EntityMetas">
            <summary>
            All entity metas keyed by type.
            </summary>
        </member>
        <member name="T:NHibernate.Envers.Entities.EntitiesConfigurations">
            <summary>
            Configuration of the user entities: property mapping of the entities, relations, inheritance.
            </summary>
        </member>
        <member name="M:NHibernate.Envers.Entities.EntityInstantiator.CreateInstanceFromVersionsEntity(System.String,System.Collections.IDictionary,System.Int64)">
            <summary>
            Creates an entity instance based on an entry from the versions table.
            </summary>
            <param name="entityName">Name of the entity, which instances should be read.</param>
            <param name="versionsEntity">An entry in the versions table, from which data should be mapped.</param>
            <param name="revision">Revision at which this entity was read.</param>
            <returns>An entity instance, with versioned properties set as in the versionsEntity map, and proxies created for collections.</returns>
        </member>
        <member name="M:NHibernate.Envers.Entities.Mapper.IPropertyMapper.MapToMapFromEntity(NHibernate.Engine.ISessionImplementor,System.Collections.Generic.IDictionary{System.String,System.Object},System.Object,System.Object)">
            <summary>
            Maps properties to the given map, basing on differences between properties of new and old objects.
            </summary>
            <param name="session">The current session.</param>
            <param name="data">Data to map to.</param>
            <param name="newObj">New state of the entity.</param>
            <param name="oldObj">Old state of the entity.</param>
            <returns>True if there are any differences between the states represented by newObj and oldObj.</returns>
        </member>
        <member name="M:NHibernate.Envers.Entities.Mapper.IPropertyMapper.MapToEntityFromMap(NHibernate.Envers.Configuration.AuditConfiguration,System.Object,System.Collections.IDictionary,System.Object,NHibernate.Envers.Reader.IAuditReaderImplementor,System.Int64)">
            <summary>
            Maps properties from the given map to the given object.
            </summary>
            <param name="verCfg">Versions configuration.</param>
            <param name="obj">object to map to.</param>
            <param name="data">Data to map from.</param>
            <param name="primaryKey">Primary key of the object to which we map (for relations)</param>
            <param name="versionsReader">VersionsReader for reading relations</param>
            <param name="revision">Revision at which the object is read, for reading relations</param>
        </member>
        <member name="M:NHibernate.Envers.Entities.Mapper.IPropertyMapper.MapCollectionChanges(System.String,NHibernate.Collection.IPersistentCollection,System.Object,System.Object)">
            <summary>
            Maps collection changes
            </summary>
            <param name="referencingPropertyName">Name of the field, which holds the collection in the entity.</param>
            <param name="newColl">New collection, after updates.</param>
            <param name="oldColl">Old collection, before updates.</param>
            <param name="id">Id of the object owning the collection.</param>
            <returns>List of changes that need to be performed on the persistent store.</returns>
        </member>
        <member name="M:NHibernate.Envers.Entities.Mapper.Id.IIdMapper.PrefixMappedProperties(System.String)">
            Creates a mapper with all mapped properties prefixed. A mapped property is a property which
            is directly mapped to values (not composite).
            @param prefix Prefix to add to mapped properties
            @return A copy of the current property mapper, with mapped properties prefixed.
        </member>
        <member name="M:NHibernate.Envers.Entities.Mapper.Id.IIdMapper.MapToQueryParametersFromId(System.Object)">
            @param obj Id from which to map.
            @return A set parameter data, needed to build a query basing on the given id.
        </member>
        <member name="M:NHibernate.Envers.Entities.Mapper.Id.IIdMapper.AddIdsEqualToQuery(NHibernate.Envers.Tools.Query.Parameters,System.String,System.String)">
            Adds query statements, which contains restrictions, which express the property that the id of the entity
            with alias prefix1, is equal to the id of the entity with alias prefix2 (the entity is the same).
            @param parameters Parameters, to which to add the statements.
            @param prefix1 First alias of the entity + prefix to add to the properties.
            @param prefix2 Second alias of the entity + prefix to add to the properties.
        </member>
        <member name="M:NHibernate.Envers.Entities.Mapper.Id.IIdMapper.AddIdsEqualToQuery(NHibernate.Envers.Tools.Query.Parameters,System.String,NHibernate.Envers.Entities.Mapper.Id.IIdMapper,System.String)">
            Adds query statements, which contains restrictions, which express the property that the id of the entity
            with alias prefix1, is equal to the id of the entity with alias prefix2 mapped by the second mapper
            (the second mapper must be for the same entity, but it can have, for example, prefixed properties).
            @param parameters Parameters, to which to add the statements.
            @param prefix1 First alias of the entity + prefix to add to the properties.
            @param mapper2 Second mapper for the same entity, which will be used to get properties for the right side
            of the equation.
            @param prefix2 Second alias of the entity + prefix to add to the properties.
        </member>
        <member name="M:NHibernate.Envers.Entities.Mapper.Id.IIdMapper.AddIdEqualsToQuery(NHibernate.Envers.Tools.Query.Parameters,System.Object,System.String,System.Boolean)">
            <summary>
            Adds query statements, which contains restrictions, which express the property that the id of the entity with alias prefix, is equal to the given object.
            </summary>
            <param name="parameters">Parameters, to which to add the statements.</param>
            <param name="id">Value of id.</param>
            <param name="prefix">Prefix to add to the properties (may be null).</param>
            <param name="equals">Should this query express the "=" relation or the "!=" relation.</param>
        </member>
        <member name="M:NHibernate.Envers.Entities.Mapper.Id.IIdMapper.AddNamedIdEqualsToQuery(NHibernate.Envers.Tools.Query.Parameters,System.String,System.Boolean)">
            <summary>
            Adds query statements, which contains named parameters, which express the property that the id of the entity with alias prefix, is equal to the given object.
            </summary>
            <param name="parameters">Parameters, to which to add the statements.</param>
            <param name="prefix">Prefix to add to the properties (may be null).</param>
            <param name="equals">Should this query express the "=" relation or the "!=" relation.</param>
            <remarks>It is the responsibility of the using method to read parameter values from the id and specify them on the final query object.</remarks>
        </member>
        <member name="M:NHibernate.Envers.Entities.Mapper.Relation.AbstractCollectionMapper`1.MapToMapFromObject(System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)">
            Maps the changed collection element to the given map.
            @param data Where to map the data.
            @param changed The changed collection element to map.
        </member>
        <member name="T:NHibernate.Envers.Entities.Mapper.Relation.CommonCollectionMapperData">
            <summary>
            Data that is used by all collection mappers, regardless of the type.  
            </summary>
        </member>
        <member name="T:NHibernate.Envers.Entities.Mapper.Relation.Component.IMiddleComponentMapper">
            @author Adam Warski (adam at warski dot org)
        </member>
        <member name="M:NHibernate.Envers.Entities.Mapper.Relation.Component.IMiddleComponentMapper.MapToObjectFromFullMap(NHibernate.Envers.Entities.EntityInstantiator,System.Collections.IDictionary,System.Object,System.Int64)">
            Maps from full object data, contained in the given map (or object representation of the map, if
            available), to an object.
            @param entityInstantiator An entity instatiator bound with an open versions reader.
            @param data Full object data.
            @param dataObject An optional object representation of the data.
            @param revision Revision at which the data is read.
            @return An object with data corresponding to the one found in the given map.
        </member>
        <member name="M:NHibernate.Envers.Entities.Mapper.Relation.Component.IMiddleComponentMapper.MapToMapFromObject(System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)">
            Maps from an object to the object's map representation (for an entity - only its id).
            @param data Map to which data should be added.
            @param obj Object to map from.
        </member>
        <member name="M:NHibernate.Envers.Entities.Mapper.Relation.Component.IMiddleComponentMapper.AddMiddleEqualToQuery(NHibernate.Envers.Tools.Query.Parameters,System.String,System.String)">
            Adds query statements, which contains restrictions, which express the property that part of the middle
            entity with alias prefix1, is equal to part of the middle entity with alias prefix2 (the entity is the same).
            The part is the component's representation in the middle entity.
            @param parameters Parameters, to which to add the statements.
            @param prefix1 First alias of the entity + prefix to add to the properties.
            @param prefix2 Second alias of the entity + prefix to add to the properties.
        </member>
        <member name="T:NHibernate.Envers.Entities.Mapper.Relation.Component.MiddleMapKeyIdComponentMapper">
            <summary>
             A component mapper for the @MapKey mapping: the value of the map's key is the id of the entity. This
             doesn't have an effect on the data stored in the versions tables, so <code>mapToMapFromObject</code> is
             empty.
            </summary>
        </member>
        <member name="T:NHibernate.Envers.Entities.Mapper.Relation.Component.MiddleMapKeyPropertyComponentMapper">
            <summary>
            A component mapper for the @MapKey mapping with the name parameter specified: the value of the map's key
            is a property of the entity. This doesn't have an effect on the data stored in the versions tables,
            so <code>mapToMapFromObject</code> is empty.
            </summary>
        </member>
        <member name="T:NHibernate.Envers.Entities.Mapper.Relation.Component.MiddleStraightComponentMapper">
            A mapper for reading and writing a property straight to/from maps. This mapper cannot be used with middle tables,
            but only with "fake" bidirectional indexed relations. 
            @author Simon Duduica, port of Envers omonyme class by Adam Warski (adam at warski dot org)
        </member>
        <member name="T:NHibernate.Envers.Entities.Mapper.Relation.MiddleComponentData">
            <summary>
            A data holder for a middle relation component (which is either the collection element or index):
            - component mapper used to map the component to and from versions entities
            - an index, which specifies in which element of the array returned by the query for reading the collection the data
            of the component is
            </summary>
        </member>
        <member name="T:NHibernate.Envers.Entities.Mapper.Relation.MiddleIdData">
            <summary>
             A class holding information about ids, which form a virtual "relation" from a middle-table. Middle-tables are used
             when mapping collections.
            </summary>
        </member>
        <member name="M:NHibernate.Envers.Entities.Mapper.Relation.MiddleIdData.IsAudited">
            <summary>
            Is the entity, to which this middle id data correspond, audited.
            </summary>
            <returns></returns>
        </member>
        <member name="T:NHibernate.Envers.Entities.Mapper.Relation.Query.IRelationQueryGenerator">
             TODO: cleanup implementations and extract common code
            
             Implementations of this interface provide a method to generate queries on a relation table (a table used
             for mapping relations). The query can select, apart from selecting the content of the relation table, also data of
             other "related" entities.
             @author Simon Duduica, port of omonyme class by Adam Warski (adam at warski dot org)
        </member>
        <member name="T:NHibernate.Envers.Entities.Mapper.Relation.Query.OneEntityQueryGenerator">
            <summary>
            Selects data from a relation middle-table only.
            </summary>
        </member>
        <member name="T:NHibernate.Envers.Entities.Mapper.Relation.Query.ThreeEntityQueryGenerator">
            <summary>
            Selects data from a relation middle-table and a two related versions entity.
            </summary>
        </member>
        <member name="T:NHibernate.Envers.Entities.Mapper.Relation.Query.TwoEntityOneAuditedQueryGenerator">
            Selects data from a relation middle-table and a related non-audited entity.
            @author Adam Warski (adam at warski dot org)
        </member>
        <member name="T:NHibernate.Envers.Entities.Mapper.Relation.Query.TwoEntityQueryGenerator">
            <summary>
            Selects data from a relation middle-table and a related versions entity.
            </summary>
        </member>
        <member name="T:NHibernate.Envers.Entities.Mapper.Relation.ToOneDelegateSessionImplementor">
                 * @author Catalina Panait, port of Envers omonyme class by Adam Warski (adam at warski dot org)
                                                                          * Tomasz Bech
        </member>
        <member name="T:NHibernate.Envers.Entities.Mapper.SubclassPropertyMapper">
            <summary>
            A mapper which maps from a parent mapper and a "main" one, but adds only to the "main". The "main" mapper
            should be the mapper of the subclass.
            </summary>
        </member>
        <member name="M:NHibernate.Envers.Entities.PropertyData.#ctor(System.String,NHibernate.Envers.Entities.PropertyData)">
            <summary>
            Copies the given property data, except the name.
            </summary>
            <param name="newName">New name</param>
            <param name="propertyData">Property data to copy the rest of properties from.</param>
        </member>
        <member name="M:NHibernate.Envers.Entities.PropertyData.#ctor(System.String,System.String,System.String,NHibernate.Envers.ModificationStore)">
            <summary>
            
            </summary>
            <param name="name">Name of the property.</param>
            <param name="beanName">Name of the property in the bean.</param>
            <param name="accessType">Accessor type for this property.</param>
            <param name="store">How this property should be stored.</param>
        </member>
        <member name="T:NHibernate.Envers.Entities.RelationType">
            <summary>
            Type of a relation between two entities.
            </summary>
        </member>
        <member name="F:NHibernate.Envers.Entities.RelationType.ToOne">
            <summary>
            A single-reference-valued relation. The entity owns the relation.
            </summary>
        </member>
        <member name="F:NHibernate.Envers.Entities.RelationType.ToOneNotOwning">
            <summary>
            A single-reference-valued relation. The entity doesn't own the relation. It is directly mapped in the related entity.
            </summary>
        </member>
        <member name="F:NHibernate.Envers.Entities.RelationType.ToManyNotOwning">
            <summary>
            A collection-of-references-valued relation. The entity doesn't own the relation. It is directly mapped in the related entity.
            </summary>
        </member>
        <member name="F:NHibernate.Envers.Entities.RelationType.ToManyMiddle">
            <summary>
            A collection-of-references-valued relation. The entity owns the relation. It is mapped using a middle table.
            </summary>
        </member>
        <member name="F:NHibernate.Envers.Entities.RelationType.ToManyMiddleNotOwning">
            <summary>
            A collection-of-references-valued relation. The entity doesn't own the relation. It is mapped using a middle table.
            </summary>
        </member>
        <member name="M:NHibernate.Envers.IAuditReader.Find``1(System.Object,System.Int64)">
            <summary>
            Find an entity by primary key at the given revision.
            </summary>
            <typeparam name="T">Type of entity</typeparam>
            <param name="primaryKey">Primary key of the entity.</param>
            <param name="revision">Revision in which to get the entity</param>
            <returns>
            The found entity instance at the given revision (its properties may be partially filled
            if not all properties are audited) or null, if an entity with that id didn't exist at that
            revision.
            </returns>
        </member>
        <member name="M:NHibernate.Envers.IAuditReader.Find(System.Type,System.Object,System.Int64)">
            <summary>
            Find an entity by primary key at the given revision.
            </summary>
            <param name="cls">Type of entity</param>
            <param name="primaryKey">Primary key of the entity.</param>
            <param name="revision">Revision in which to get the entity</param>
            <returns>
            The found entity instance at the given revision (its properties may be partially filled
            if not all properties are audited) or null, if an entity with that id didn't exist at that
            revision.
            </returns>
        </member>
        <member name="M:NHibernate.Envers.IAuditReader.GetRevisions(System.Type,System.Object)">
            <summary>
            Get a list of revision numbers, at which an entity was modified.
            </summary>
            <param name="cls">Class of the entity.</param>
            <param name="primaryKey">Primary key of the entity.</param>
            <returns>
            A list of revision numbers, at which the entity was modified, sorted in ascending order (so older
            revisions come first).
            </returns>
        </member>
        <member name="M:NHibernate.Envers.IAuditReader.GetRevisionDate(System.Int64)">
            <summary>
            Get the date, at which a revision was created. 
            </summary>
            <param name="revision">Number of the revision for which to get the date.</param>
            <returns>Date of commiting the given revision.</returns>
        </member>
        <member name="M:NHibernate.Envers.IAuditReader.GetRevisionNumberForDate(System.DateTime)">
            <summary>
            Gets the revision number, that corresponds to the given date.
            </summary>
            <param name="date">Date for which to get the revision.</param>
            <returns>The number of the highest revision, which was created on or before the given <paramref name="date"/>.</returns>
            <remarks>
            The result is that:
            <code>
            <![CDATA[
            GetRevisionDate(GetRevisionNumberForDate(date)) <= date
            ]]>
            </code>
            and
            <code>
            <![CDATA[
            GetRevisionDate(GetRevisionNumberForDate(date)+1) > date
            ]]>
            </code>
            </remarks>
        </member>
        <member name="M:NHibernate.Envers.IAuditReader.FindRevision``1(System.Int64)">
            <summary>
            A helper method; should be used only if a custom revision entity is used.
            </summary>
            <typeparam name="T">Class of the revision entity. Should be annotated with RevisionEntity.</typeparam>
            <param name="revision">Number of the revision for which to get the data.</param>
            <returns>Entity containing data for the given revision.</returns>
        </member>
        <member name="M:NHibernate.Envers.IAuditReader.FindRevision(System.Type,System.Int64)">
            <summary>
            A helper method; should be used only if a custom revision entity is used.
            </summary>
            <param name="type">Class of the revision entity. Should be annotated with RevisionEntity.</param>
            <param name="revision">Number of the revision for which to get the data.</param>
            <returns>Entity containing data for the given revision.</returns>
        </member>
        <member name="M:NHibernate.Envers.IAuditReader.GetCurrentRevision``1(System.Boolean)">
            <summary>
            Gets an instance of the current revision entity, to which any entries in the audit tables will be bound.
            Please note the if {@code persist} is {@code false}, and no audited entities are modified in this session,
            then the obtained revision entity instance won't be persisted. If {@code persist} is {@code true}, the revision
            entity instance will always be persisted, regardless of whether audited entities are changed or not.
            </summary>
            <typeparam name="T">Class of the revision entity. Should be annotated with {@link RevisionEntity}.</typeparam>
            <param name="persist">
            If the revision entity is not yet persisted, should it become persisted. This way, the primary
            identifier (id) will be filled (if it's assigned by the DB) and available, but the revision entity will be
            persisted even if there are no changes to audited entities. Otherwise, the revision number (id) can be
            null.</param>
            <returns>The current revision entity, to which any entries in the audit tables will be bound.</returns>
        </member>
        <member name="M:NHibernate.Envers.IAuditReader.GetCurrentRevision(System.Type,System.Boolean)">
            <summary>
            Gets an instance of the current revision entity, to which any entries in the audit tables will be bound.
            Please note the if {@code persist} is {@code false}, and no audited entities are modified in this session,
            then the obtained revision entity instance won't be persisted. If {@code persist} is {@code true}, the revision
            entity instance will always be persisted, regardless of whether audited entities are changed or not.
            </summary>
            <param name="type">Class of the revision entity. Should be annotated with {@link RevisionEntity}.</param>
            <param name="persist">
            If the revision entity is not yet persisted, should it become persisted. This way, the primary
            identifier (id) will be filled (if it's assigned by the DB) and available, but the revision entity will be
            persisted even if there are no changes to audited entities. Otherwise, the revision number (id) can be
            null.</param>
            <returns>The current revision entity, to which any entries in the audit tables will be bound.</returns>
        </member>
        <member name="M:NHibernate.Envers.IAuditReader.CreateQuery">
            <summary>
            Creates a query
            </summary>
            <returns>
            A query creator, associated with this AuditReader instance, with which queries can be
            created and later executed. Shouldn't be used after the associated Session or EntityManager
            is closed.
            </returns>
        </member>
        <member name="M:NHibernate.Envers.IRevisionListener.NewRevision(System.Object)">
            <summary>
            Called when a new revision is created.
            </summary>
            <param name="revisionEntity">
            An instance of the entity annotated with <see cref="T:NHibernate.Envers.RevisionEntityAttribute"/> which will be persisted
            after this method returns. All properties on this entity that are to be persisted should be set by this method.
            </param>
        </member>
        <member name="T:NHibernate.Envers.NotAuditedAttribute">
            <summary>
            When applied to a field, indicates that this field should not be audited.
            </summary>
        </member>
        <member name="M:NHibernate.Envers.Query.AuditEntity.Property(System.String)">
            <summary>
            Create restrictions, projections and specify order for a property of an audited entity.
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Envers.Query.AuditEntity.RevisionNumber">
            <summary>
            Create restrictions, projections and specify order for the revision number, corresponding to an audited entity.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Envers.Query.AuditEntity.RevisionProperty(System.String)">
            <summary>
            Create restrictions, projections and specify order for a property of the revision entity, corresponding to an audited entity.
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Envers.Query.AuditEntity.RevisionType">
            <summary>
            Create restrictions, projections and specify order for the revision type, corresponding to an audited entity.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Envers.Query.AuditEntity.RelatedId(System.String)">
            <summary>
            Create restrictions on an id of a related entity.
            </summary>
            <param name="propertyName">Name of the property, which is the relation.</param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Envers.Query.AuditEntity.And(NHibernate.Envers.Query.Criteria.IAuditCriterion,NHibernate.Envers.Query.Criteria.IAuditCriterion)">
            <summary>
            Return the conjuction of two criterions.
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Envers.Query.AuditEntity.Or(NHibernate.Envers.Query.Criteria.IAuditCriterion,NHibernate.Envers.Query.Criteria.IAuditCriterion)">
            <summary>
            Return the disjuction of two criterions.
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Envers.Query.AuditEntity.Not(NHibernate.Envers.Query.Criteria.IAuditCriterion)">
            <summary>
            Return the negation of a criterion.
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Envers.Query.AuditEntity.Conjunction">
            <summary>
            Group criterions together in a single conjunction (A and B and C...).
            </summary>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Envers.Query.AuditEntity.Disjunction">
            <summary>
            Group criterions together in a single disjunction (A or B or C...).
            </summary>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Envers.Query.AuditQueryCreator.ForEntitiesAtRevision(System.Type,System.Int64)">
            <summary>
            Creates a query, which will return entities satisfying some conditions (specified later), at a given revision.
            </summary>
            <param name="c"><see cref="T:System.Type"/> of the entities for which to query.</param>
            <param name="revision">Revision number at which to execute the query.</param>
            <returns>A query for entities at a given revision, to which conditions can be added and which can then be executed</returns>
            <remarks>The result of the query will be a list of entities instances, unless a projection is added.</remarks>
        </member>
        <member name="M:NHibernate.Envers.Query.AuditQueryCreator.ForRevisionsOfEntity(System.Type,System.Boolean,System.Boolean)">
            Creates a query, which selects the revisions, at which the given entity was modified.
            Unless an explicit projection is set, the result will be a list of three-element arrays, containing:
            <ol>
            <li>the entity instance</li>
            <li>revision entity, corresponding to the revision at which the entity was modified. If no custom
            revision entity is used, this will be an instance of {@link org.hibernate.envers.DefaultRevisionEntity}</li>
            <li>type of the revision (an enum instance of class {@link org.hibernate.envers.RevisionType})</li>.
            </ol>
            Additional conditions that the results must satisfy may be specified.
            @param c Class of the entities for which to query.
            @param selectEntitiesOnly If true, instead of a list of three-element arrays, a list of entites will be
            returned as a result of executing this query.
            @param selectDeletedEntities If true, also revisions where entities were deleted will be returned. The additional
            entities will have revision type "delete", and contain no data (all fields null), except for the id field.
            @return A query for revisions at which instances of the given entity were modified, to which
            conditions can be added (for example - a specific id of an entity of class <code>c</code>), and which
            can then be executed. The results of the query will be sorted in ascending order by the revision number,
            unless an order or projection is added.
        </member>
        <member name="M:NHibernate.Envers.Query.AuditQueryCreator.ForRevisionsOf``1">
            <summary>
            Creates a query, which selects the revisions, at which the given entity was modified.
            </summary>
            <typeparam name="TEntity">The <see cref="T:System.Type"/> of the entities for which to query.</typeparam>
            <returns>List of <typeparamref name="TEntity"/> instances of each revision excluding deletation.</returns>
            <remarks>The results of the query will be sorted in ascending order by the revision number, unless an order or projection is added.</remarks>
        </member>
        <member name="M:NHibernate.Envers.Query.AuditQueryCreator.ForRevisionsOf``1(System.Boolean)">
            <summary>
            Creates a query, which selects the revisions, at which the given entity was modified.
            </summary>
            <typeparam name="TEntity">The <see cref="T:System.Type"/> of the entities for which to query.</typeparam>
            <param name="includesDeletations">If true, also revisions where entities were deleted will be returned. 
            <remarks>
            The additional entities will have revision type <see cref="F:NHibernate.Envers.RevisionType.Deleted"/>, and contain no data (all fields null), except for the id field.
            </remarks>
            </param>
            <remarks>The results of the query will be sorted in ascending order by the revision number, unless an order or projection is added.</remarks>
        </member>
        <member name="T:NHibernate.Envers.Query.Criteria.AuditConjunction">
            @author Adam Warski (adam at warski dot org)
        </member>
        <member name="T:NHibernate.Envers.Query.Criteria.AuditDisjunction">
            @author Adam Warski (adam at warski dot org)
        </member>
        <member name="T:NHibernate.Envers.Query.Criteria.AuditId">
            <summary>
            Create restrictions and projections for the id of an audited entity.
            </summary>
        </member>
        <member name="M:NHibernate.Envers.Query.Criteria.AuditId.Count(System.String)">
            Projection counting the values
            TODO: idPropertyName isn't needed, should be read from the configuration
            @param idPropertyName Name of the identifier property
        </member>
        <member name="T:NHibernate.Envers.Query.Criteria.AuditProperty`1">
            <summary>
            Create restrictions, projections and specify order for a property of an audited entity.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:NHibernate.Envers.Query.Projection.IAuditProjection.GetData(NHibernate.Envers.Configuration.AuditConfiguration)">
            @param auditCfg Configuration.
            @return A triple: (function name - possibly null, property name, add distinct?).
        </member>
        <member name="M:NHibernate.Envers.Query.Criteria.AuditProperty`1.Maximize">
            <summary>
            Apply a "maximalize" constraint, with the ability to specify further constraints on the maximized property
            </summary>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Envers.Query.Criteria.AuditProperty`1.Minimize">
            <summary>
            Apply a "minimize" constraint, with the ability to specify further constraints on the minimized property
            </summary>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Envers.Query.Criteria.AuditProperty`1.Max">
            <summary>
            Projection on the maximum value
            </summary>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Envers.Query.Criteria.AuditProperty`1.Min">
            <summary>
            Projection on the minimum value
            </summary>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Envers.Query.Criteria.AuditProperty`1.Function(System.String)">
            <summary>
            Projection using a custom function
            </summary>
            <param name="functionName"></param>
            <returns></returns>
        </member>
        <member name="T:NHibernate.Envers.Query.Criteria.BetweenAuditExpression">
            @author Adam Warski (adam at warski dot org)
        </member>
        <member name="T:NHibernate.Envers.Query.Criteria.CriteriaTools">
            @author Adam Warski (adam at warski dot org)
        </member>
        <member name="T:NHibernate.Envers.Query.Criteria.IdentifierEqAuditExpression">
            A criterion that expresses that the id of an entity is equal or not equal to some specified value.
            @author Adam Warski (adam at warski dot org)
        </member>
        <member name="T:NHibernate.Envers.Query.Criteria.InAuditExpression">
            @author Adam Warski (adam at warski dot org)
        </member>
        <member name="T:NHibernate.Envers.Query.Criteria.LogicalAuditExpression">
            @author Adam Warski (adam at warski dot org)
        </member>
        <member name="T:NHibernate.Envers.Query.Criteria.NotAuditExpression">
            @author Adam Warski (adam at warski dot org)
        </member>
        <member name="T:NHibernate.Envers.Query.Criteria.NotNullAuditExpression">
            @author Adam Warski (adam at warski dot org)
        </member>
        <member name="T:NHibernate.Envers.Query.Criteria.NullAuditExpression">
            @author Adam Warski (adam at warski dot org)
        </member>
        <member name="T:NHibernate.Envers.Query.Criteria.PropertyAuditExpression">
            @author Adam Warski (adam at warski dot org)
        </member>
        <member name="T:NHibernate.Envers.Query.Criteria.SimpleAuditExpression">
            @author Adam Warski (adam at warski dot org)
        </member>
        <member name="T:NHibernate.Envers.Query.IEntityAuditQuery`1">
            <summary>
            Audit query based on a specific entity.
            </summary>
            <typeparam name="T">The entity type.</typeparam>
            <remarks>No projection are allowed.</remarks>
            <seealso cref="T:NHibernate.Envers.Query.IAuditQuery"/>
        </member>
        <member name="T:NHibernate.Envers.Query.IRevisionEntityInfo`2">
            <summary>
            Detailed result of a query over the history of an entity. 
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <typeparam name="TRevisionEntity">The type of RevisionEntity</typeparam>
            <seealso cref="T:NHibernate.Envers.DefaultRevisionEntity"/>
        </member>
        <member name="T:NHibernate.Envers.Query.Order.IAuditOrder">
            @author Adam Warski (adam at warski dot org)
        </member>
        <member name="M:NHibernate.Envers.Query.Order.IAuditOrder.getData(NHibernate.Envers.Configuration.AuditConfiguration)">
            @param auditCfg Configuration.
            @return A pair: (property name, ascending?).
        </member>
        <member name="T:NHibernate.Envers.Query.Order.PropertyAuditOrder">
            @author Adam Warski (adam at warski dot org)
        </member>
        <member name="T:NHibernate.Envers.Query.Projection.PropertyAuditProjection">
            @author Adam Warski (adam at warski dot org)
        </member>
        <member name="T:NHibernate.Envers.Query.Property.EntityPropertyName">
            Used for specifying restrictions on a property of an audited entity.
            @author Adam Warski (adam at warski dot org)
        </member>
        <member name="T:NHibernate.Envers.Query.Property.IPropertyNameGetter">
            Provides a function to get the name of a property, which is used in a query, to apply some restrictions on it.
            @author Adam Warski (adam at warski dot org)
        </member>
        <member name="M:NHibernate.Envers.Query.Property.IPropertyNameGetter.Get(NHibernate.Envers.Configuration.AuditConfiguration)">
            @param auditCfg Audit configuration.
            @return Name of the property, to be used in a query.
        </member>
        <member name="T:NHibernate.Envers.Query.Property.OriginalIdPropertyName">
            Used for specifying restrictions on the identifier.
            TODO: idPropertyName should be read basing on auditCfg + entityName
            @author Adam Warski (adam at warski dot org)
        </member>
        <member name="T:NHibernate.Envers.Query.Property.RevisionNumberPropertyName">
            Used for specifying restrictions on the revision number, corresponding to an audit entity.
            @author Adam Warski (adam at warski dot org)
        </member>
        <member name="T:NHibernate.Envers.Query.Property.RevisionPropertyPropertyName">
            <summary>
            Used for specifying restrictions on a property of the revision entity, which is associated with an audit entity.
            </summary>
        </member>
        <member name="T:NHibernate.Envers.Query.Property.RevisionTypePropertyName">
            Used for specifying restrictions on the revision number, corresponding to an audit entity.
            @author Adam Warski (adam at warski dot org)
        </member>
        <member name="T:NHibernate.Envers.Query.QueryBuilder">
            <summary>
            A class for incrementaly building a HQL query.
            </summary>
        </member>
        <member name="F:NHibernate.Envers.Query.QueryBuilder.aliasCounter">
            For use by alias generator (in case an alias is not provided by the user).
        </member>
        <member name="F:NHibernate.Envers.Query.QueryBuilder.paramCounter">
            For use by parameter generator, in {@link Parameters}. This counter must be
            the same in all parameters and sub-queries of this query.
        </member>
        <member name="F:NHibernate.Envers.Query.QueryBuilder.rootParameters">
            Main "where" parameters for this query.
        </member>
        <member name="F:NHibernate.Envers.Query.QueryBuilder.froms">
            A list of pairs (from entity name, alias name).
        </member>
        <member name="F:NHibernate.Envers.Query.QueryBuilder.orders">
            A list of pairs (property name, order ascending?).
        </member>
        <member name="F:NHibernate.Envers.Query.QueryBuilder.projections">
            A list of complete projection definitions: either a sole property name, or a function(property name).
        </member>
        <member name="M:NHibernate.Envers.Query.QueryBuilder.#ctor(System.String,System.String)">
            
             @param entityName Main entity which should be selected.
             @param alias Alias of the entity
        </member>
        <member name="M:NHibernate.Envers.Query.QueryBuilder.AddFrom(System.String,System.String)">
            Add an entity from which to select.
            @param entName Name of the entity from which to select.
            @param als Alias of the entity. Should be different than all other aliases.
        </member>
        <member name="M:NHibernate.Envers.Query.QueryBuilder.NewSubQueryBuilder">
            @return A sub-query builder for the same entity (with an auto-generated alias). The sub-query can
            be later used as a value of a parameter.
        </member>
        <member name="M:NHibernate.Envers.Query.QueryBuilder.NewSubQueryBuilder(System.String,System.String)">
            @param entityName Entity name, which will be the main entity for the sub-query.
            @param alias Alias of the entity, which can later be used in parameters.
            @return A sub-query builder for the given entity, with the given alias. The sub-query can
            be later used as a value of a parameter.
        </member>
        <member name="M:NHibernate.Envers.Query.QueryBuilder.Build(System.Text.StringBuilder,System.Collections.Generic.IDictionary{System.String,System.Object})">
            Builds the given query, appending results to the given string buffer, and adding all query parameter values
            that are used to the map provided.
            @param sb String builder to which the query will be appended.
            @param queryParamValues Map to which name and values of parameters used in the query should be added.
        </member>
        <member name="T:NHibernate.Envers.Reader.IAuditReaderImplementor">
            <summary>
            An interface exposed by a VersionsReader to library-facing classes.
            </summary>
        </member>
        <member name="T:NHibernate.Envers.Reader.FirstLevelCache">
            <summary>
            First level cache for versioned entities, versions reader-scoped. Each entity is uniquely identified by a
            revision number and entity id.
            </summary>
        </member>
        <member name="T:NHibernate.Envers.Reader.IFirstLevelCache">
            First level cache for versioned entities, versions reader-scoped. Each entity is uniquely identified by a
            revision number and entity id.
            @author Simon Duduica, created interface that separes the first level cache implementation.
            Default implementation will be FirstLevelCache to be ported in the phase 2
        </member>
        <member name="T:NHibernate.Envers.RevisionNumberAttribute">
            <summary>
             Marks a property which will hold the number of the revision in a revision entity, see
             {@link RevisionListener}. Values of this property should form a strictly-increasing sequence
             of numbers. The value of this property won't be set by Envers. In most cases, this should be
             an auto-generated database-assigned primary id.
            </summary>
        </member>
        <member name="T:NHibernate.Envers.RevisionType">
            <summary>
            Type of the revision.
            </summary>
        </member>
        <member name="F:NHibernate.Envers.RevisionType.Added">
            <summary>
            Indicates that the entity was added (persisted) at that revision.
            </summary>
        </member>
        <member name="F:NHibernate.Envers.RevisionType.Modified">
            <summary>
            Indicates that the entity was modified (one or more of its fields) at that revision.
            </summary>
        </member>
        <member name="F:NHibernate.Envers.RevisionType.Deleted">
            <summary>
            Indicates that the entity was deleted (removed) at that revision.
            </summary>
        </member>
        <member name="T:NHibernate.Envers.Synchronization.Work.IWorkUnitMergeVisitor">
            <summary>
            Visitor pattern visitor. All methods should be invoked on the first work unit.
            </summary>
        </member>
        <member name="T:NHibernate.Envers.Synchronization.Work.IWorkUnitMergeDispatcher">
            <summary>
            Visitor patter dispatcher.
            </summary>
        </member>
        <member name="M:NHibernate.Envers.Synchronization.Work.IWorkUnitMergeDispatcher.Dispatch(NHibernate.Envers.Synchronization.Work.IWorkUnitMergeVisitor)">
            <summary>
            Shuold be invoked on the second work unit.
            </summary>
            <param name="first">First work unit (that is, the one added earlier).</param>
            <returns>The work unit that is the result of the merge.</returns>
        </member>
        <member name="M:NHibernate.Envers.Synchronization.Work.IAuditWorkUnit.Perform(NHibernate.ISession,System.Object)">
            <summary>
            Perform this work unit in the given session.
            </summary>
            <param name="session">Session, in which the work unit should be performed.</param>
            <param name="revisionData">
            The current revision data, which will be used to populate the work unit with the correct revision relation.
            </param>
        </member>
        <member name="M:NHibernate.Envers.Synchronization.Work.IAuditWorkUnit.GenerateData(System.Object)">
            <summary>
            </summary>
            <param name="revisionData">The current revision data, which will be used to populate the work unit with the correct revision relation.</param>
            <returns>Generates data that should be saved when performing this work unit.</returns>
        </member>
        <member name="T:NHibernate.Envers.Synchronization.Work.FakeBidirectionalRelationWorkUnit">
            <summary>
            A work unit that handles "fake" bidirectional one-to-many relations (mapped with {@code @OneToMany+@JoinColumn} and
            {@code @ManyToOne+@Column(insertable=false, updatable=false)}.
            </summary>
        </member>
        <member name="M:NHibernate.Envers.Synchronization.Work.FakeBidirectionalRelationWorkUnit.#ctor(NHibernate.Engine.ISessionImplementor,System.String,NHibernate.Envers.Configuration.AuditConfiguration,System.Object,System.String,System.Object,NHibernate.Envers.Entities.RelationDescription,NHibernate.Envers.RevisionType,System.Object,NHibernate.Envers.Synchronization.Work.IAuditWorkUnit)">
            <summary>
            The work unit responsible for generating the "raw" entity data to be saved.
            </summary>
            <param name="sessionImplementor"></param>
            <param name="entityName"></param>
            <param name="verCfg"></param>
            <param name="id"></param>
            <param name="referencingPropertyName"></param>
            <param name="owningEntity"></param>
            <param name="rd"></param>
            <param name="revisionType"></param>
            <param name="index"></param>
            <param name="nestedWorkUnit"></param>
        </member>
        <member name="T:NHibernate.Envers.Synchronization.Work.FakeBidirectionalRelationWorkUnit.FakeRelationChange">
            <summary>
            Describes a change to a single fake bidirectional relation.
            </summary>
        </member>
        <member name="T:NHibernate.Envers.Synchronization.Work.PersistentCollectionChangeWorkUnit.PersistentCollectionChangeWorkUnitId">
            <summary>
            A unique identifier for a collection work unit. Consists of an id of the owning entity and the name of
            the entity plus the name of the field (the role). This is needed because such collections aren't entities
            in the "normal" mapping, but they are entities for Envers.
            </summary>
        </member>
        <member name="T:NHibernate.Envers.Tools.Graph.GraphTopologicalSort">
            @author Simon Duduica, port of Envers omonyme class by Adam Warski (adam at warski dot org)
        </member>
        <member name="M:NHibernate.Envers.Tools.Graph.GraphTopologicalSort.Sort``2(NHibernate.Envers.Tools.Graph.IGraphDefiner{``0,``1})">
            Sorts a graph topologically.
            @param definer Defines a graph (values and representations) to sort.
            @return Values of the graph, sorted topologically.
        </member>
        <member name="T:NHibernate.Envers.Tools.Graph.TopologicalSort`1">
            Topological sorting of a graph - based on DFS.
            @author Simon Duduica, port of Envers omonyme class by Adam Warski (adam at warski dot org)
        </member>
        <member name="T:NHibernate.Envers.Tools.Graph.Vertex`1">
                 * A graph vertex - stores its representation, neighbours, start and end time in (D|B)FS.
             * @author Simon Duduica, port of Envers omonyme class by Adam Warski (adam at warski dot org)
        </member>
        <member name="M:NHibernate.Envers.Tools.MappingTools.CreateComponentPrefix(System.String)">
            <summary>
            </summary>
            <param name="componentName">Name of the component, that is, 
            name of the property in the entity that references the component</param>
            <returns>A prefix for properties in the given component.</returns>
        </member>
        <member name="M:NHibernate.Envers.Tools.MappingTools.CreateToOneRelationPrefix(System.String)">
            <summary>
            </summary>
            <param name="referencePropertyName">The name of the property that holds the relation to the entity.</param>
            <returns>A prefix which should be used to prefix an id mapper for the related entity.</returns>
        </member>
        <member name="T:NHibernate.Envers.Tools.MutableBoolean">
            Generates metadata for to-one relations (reference-valued properties).
            @author @author Catalina Panait, port of Envers omonyme class by Adam Warski (adam at warski dot org)
        </member>
        <member name="T:NHibernate.Envers.Tools.MutableInteger">
            Generates metadata for to-one relations (reference-valued properties).
            @author @author Catalina Panait, port of Envers omonyme class by Adam Warski (adam at warski dot org)
        </member>
        <member name="T:NHibernate.Envers.Tools.Query.Parameters">
            Generates metadata for to-one relations (reference-valued properties).
            @author Catalina Panait, port of Envers omonyme class by Adam Warski (adam at warski dot org)
        </member>
        <member name="F:NHibernate.Envers.Tools.Query.Parameters.alias">
            Main alias of the entity.
        </member>
        <member name="F:NHibernate.Envers.Tools.Query.Parameters.connective">
            Connective between these parameters - "and" or "or".
        </member>
        <member name="F:NHibernate.Envers.Tools.Query.Parameters.queryParamCounter">
            For use by the parameter generator. Must be the same in all "child" (and parent) parameters.
        </member>
        <member name="F:NHibernate.Envers.Tools.Query.Parameters.subParameters">
            A list of sub-parameters (parameters with a different connective).
        </member>
        <member name="F:NHibernate.Envers.Tools.Query.Parameters.negatedParameters">
            A list of negated parameters.
        </member>
        <member name="F:NHibernate.Envers.Tools.Query.Parameters.expressions">
            A list of complete where-expressions.
        </member>
        <member name="F:NHibernate.Envers.Tools.Query.Parameters.localQueryParamValues">
            Values of parameters used in expressions.
        </member>
        <member name="M:NHibernate.Envers.Tools.Query.Parameters.AddSubParameters(System.String)">
            Adds sub-parameters with a new connective. That is, the parameters will be grouped in parentheses in the
            generated query, e.g.: ... and (exp1 or exp2) and ..., assuming the old connective is "and", and the
            new connective is "or".
            @param newConnective New connective of the parameters.
            @return Sub-parameters with the given connective.
        </member>
        <member name="M:NHibernate.Envers.Tools.Query.Parameters.AddNegatedParameters">
            Adds negated parameters, by default with the "and" connective. These paremeters will be grouped in parentheses
            in the generated query and negated, e.g. ... not (exp1 and exp2) ...
            @return Negated sub paremters.
        </member>
        <member name="M:NHibernate.Envers.Tools.StringTools.GetLastComponent(System.String)">
            <summary>
            </summary>
            <param name="s">String, from which to get the last component.</param>
            <returns>
            The last component of the dot-separated string <code>s</code>. For example, for a string
            * "a.b.c", the result is "c".
            </returns>
        </member>
        <member name="M:NHibernate.Envers.Tools.StringTools.Append(System.Text.StringBuilder,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            To the given string builder, appends all strings in the given iterator, separating them with the given
            separator. For example, for an interator "a" "b" "c" and separator ":" the output is "a:b:c".
            </summary>
            <param name="sb">String builder, to which to append.</param>
            <param name="contents">Strings to be appended.</param>
            <param name="separator">Separator between subsequent content.</param>
        </member>
        <member name="M:NHibernate.Envers.Tools.Toolz.ListToIndexElementPairList``1(System.Collections.IList)">
            Transforms a list of arbitrary elements to a list of index-element pairs.
            @param list List to transform.
            @return A list of pairs: ((0, element_at_index_0), (1, element_at_index_1), ...)
        </member>
        <member name="M:NHibernate.Envers.Tools.Toolz.GetProperty(System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String)">
            @param properties Properties from which to read.
            @param propertyName The name of the property.
            @param defaultValue Default value returned if no value for {@code propertyName} is set.
            @return The value of the property or the default value, if property is not set.
        </member>
    </members>
</doc>
